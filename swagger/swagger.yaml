swagger: "2.0"
info:
  title: Sunglasses.io API
  description: For all your sunglass store needs
  version: "1.0.0"
# the domain of the service
host: "localhost:3001"
# array of all schemes that your API supports
schemes:
  - https
# will be prefixed to all paths
basePath: /v1
produces:
  - application/json
paths:
  /brands:
    get:
      summary: List of Brands
      description: |
        The Brands endpoint returns information about all available brands in
        the database. The response includes a brand id and name.
        proper display order.
      parameters:
        - name: query
          in: query
          description: Causes return array to only contain Brands that have a name match
          required: false
          type: string
      tags:
        - Brands
      responses:
        200:
          description: An array of brands
          schema:
            type: array
            items:
              $ref: "#/definitions/Brand"
  /products:
    get:
      summary: List of Products
      description: |
        The Products endpoint returns information about all available products in        the database. The response includes a prodct id, name, price, and description. Also inclues a linking id to a Brand as well as an array of images to use with the product.
      parameters:
        - name: query
          in: query
          description: Causes return array to only contain Products that have a name match
          required: false
          type: string
      tags:
        - Products
      responses:
        200:
          description: An array of Products
          schema:
            type: array
            items:
              $ref: "#/definitions/Product"
  "/brands/{brandId}/products":
    get:
      summary: List of Products For the Specified Brand
      description: |
        The Products endpoint returns information about all available products in        the database. The response includes a prodct id, name, price, and description. Also inclues a linking id to a Brand as well as an array of images to use with the product.
      parameters:
        - name: brandId
          in: path
          description: The brand ID to filter the returned products by
          required: true
          type: string
      tags:
        - Products
      responses:
        200:
          description: An array of Products filtered by Brand
          schema:
            type: array
            items:
              $ref: "#/definitions/Product"
        404:
          description: The specified Brand was not found.
          schema:
            type: array
            items:
              $ref: "#/definitions/Error"
  /api/login:
    post:
      summary: Login request
      description: |
        Logs the user with provided username and password into thesystem and returns an access token to be used as a query param for authentication required requests.
      parameters:
        - in: body
          name: body
          description: The user to login with.
          schema:
            $ref: "#/definitions/User"
      tags:
        - Login
      responses:
        200:
          description: Access Token reponse
          schema:
            $ref: "#/definitions/AccessToken"
        400:
          description: Missing Username, Password, or Both
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid Username, Password, or Both
          schema:
            $ref: "#/definitions/Error"
  /api/me/cart:
    post:
      summary: Add Item To Cart
      description: |
        Adds the provided item to the users cart, increments it's quantity if already in the cart.
      parameters:
        - name: accessToken
          in: query
          description: Valid Access Token for User associated with Cart.
          required: true
          type: string
      tags:
        - Cart Actions
      responses:
        200:
          description: Returns Current Cart
          schema:
            type: array
            items:
              $ref: "#/definitions/CartItem"
        404:
          description: Item Wasn't Found
          schema:
            $ref: "#/definitions/Error"
        400:
          description: Bad Request (Missing Product in Body)
          schema:
            $ref: "#/definitions/Error"
        401:
          description: Invalid Access Token
          schema:
            $ref: "#/definitions/Error"
definitions:
  Brand:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier representing a specific brand.
      name:
        type: string
        description: Name of the brand.
  Product:
    type: object
    properties:
      id:
        type: string
        description: Unique identifier representing a specific product.
      categoryId:
        type: string
        description: Identifier linking this product to a category.
      name:
        type: string
        description: Name of the product.
      description:
        type: string
        description: Description about this product
      price:
        type: number
        description: Price for this product
      imageUrls:
        type: array
        items:
          type: string
        description: Array of image Urls for this product
  AccessToken:
    type: object
    properties:
      accessToken:
        type: string
        description: Unique access token used for this account after login.
  User:
    type: object
    properties:
      username:
        type: string
        description: Username for this user
      password:
        type: string
        description: Password for this user
  CartItem:
    type: object
    properties:
      quantity:
        type: integer
        format: int32
        description: Amount Of Product In Cart
      product:
        $ref: "#/definitions/Product"
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
        description: Repeated Error Code
      message:
        type: string
        description: Message detailing the reasoning for the error
